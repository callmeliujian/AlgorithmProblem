package 动态规划.股票问题;

//给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
//
//        设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
//
//        注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
//
//         
//
//        示例 1:
//
//        输入：prices = [3,3,5,0,0,3,1,4]
//        输出：6
//        解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
//             随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
//        示例 2：
//
//        输入：prices = [1,2,3,4,5]
//        输出：4
//        解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。  
//             注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。  
//             因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
//        示例 3：
//
//        输入：prices = [7,6,4,3,1]
//        输出：0
//        解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
//        示例 4：
//
//        输入：prices = [1]
//        输出：0
//
//        来源：力扣（LeetCode）
//        链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii
//        著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

public class _123_买卖股票的最佳时机_III {
    // https://programmercarl.com/0188.买卖股票的最佳时机IV.html#_188-买卖股票的最佳时机iv
    public int maxProfit(int[] prices) {
        // 一天一共就有五个状态，
        // 没有操作
        // 第一次买入
        // 第一次卖出
        // 第二次买入
        // 第二次卖出
        // dp[i][j]中 i表示第i天，j为 [0 - 4] 五个状态，dp[i][j]表示第i天状态j所剩最大现金。
        int[][] dp = new int[prices.length][5];
//        第0天没有操作，这个最容易想到，就是0，即：dp[0][0] = 0;
//        第0天做第一次买入的操作，dp[0][1] = -prices[0];
//        第0天做第一次卖出的操作，这个初始值应该是多少呢？
//        首先卖出的操作一定是收获利润，整个股票买卖最差情况也就是没有盈利即全程无操作现金为0，
//        从递推公式中可以看出每次是取最大值，那么既然是收获利润如果比0还小了就没有必要收获这个利润了。
//        所以dp[0][2] = 0;
//        第0天第二次买入操作，初始值应该是多少呢？应该不少同学疑惑，第一次还没买入呢，怎么初始化第二次买入呢？
//        第二次买入依赖于第一次卖出的状态，其实相当于第0天第一次买入了，第一次卖出了，然后在买入一次（第二次买入），那么现在手头上没有现金，只要买入，现金就做相应的减少。
//        所以第二次买入操作，初始化为：dp[0][3] = -prices[0];
//        同理第二次卖出初始化dp[0][4] = 0;
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        dp[0][2] = 0;
        dp[0][3] = -prices[0];
        dp[0][4] = 0;

        for (int i = 1; i < prices.length; i++) {
            dp[i][0] = dp[i - 1][0];
            dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - prices[i]);
            dp[i][2] = Math.max(dp[i-1][2], dp[i-1][1] + prices[i]);
            dp[i][3] = Math.max(dp[i-1][3], dp[i-1][2] - prices[i]);
            dp[i][4] = Math.max(dp[i-1][4], dp[i-1][3] + prices[i]);
        }
        return dp[prices.length - 1][4];
    }

}
